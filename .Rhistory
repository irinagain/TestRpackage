}
# Check agreement between errors with a given tolerance
check_errors <- function(error1, error2, tol = 0.01){
niter = length(error2)
if (length(error1) != niter){
return(0)
}else{
# Check the last 5 iterations
ratio = error1[(niter-5):niter]/error2[(niter - 5):niter]
if ((mean(ratio, na.rm = T) > 1 - tol)&(mean(ratio, na.rm = T) < 1 + tol)){
return(1)
}else if((mean(ratio*100, na.rm = T) > 1 - tol)&(mean(ratio*100, na.rm = T) < 1 + tol)){
return(0.5)
}else{
return(0)
}
}
}
set.seed(93856)
x <- rbind(matrix(rnorm(200, sd = 0.3), ncol = 2),
matrix(rnorm(200, mean = 1, sd = 0.3), ncol = 2),
matrix(rnorm(200, mean = 1.5, sd = 0.3), ncol = 2))
y <- rep(0, 300)
y[101:200] <- 1
y[201:300] <- 2
Xtest <- rbind(matrix(rnorm(100, mean = 1, sd = 0.3), ncol = 2), matrix(rnorm(200, mean = 1.5, sd = 0.3), ncol = 2), matrix(rnorm(200, sd = 0.3), ncol = 2))
Ytest <- c(rep(1, 50), rep(2, 100), rep(0, 100))
# Does it check that the 1st column is 1s? Save for later
col1_error = tryCatch(LRMultiClass(X = x, y = y, Xt = Xtest, yt = Ytest), error = function(e) e)
# Add a columns of 1s
x = cbind(rep(1, nrow(x)), x)
Xtest = cbind(rep(1, nrow(Xtest)), Xtest)
# Does it run without errors?
out1 = tryCatch(LRMultiClass(X = x, y = y, Xt = Xtest, yt = Ytest), error = printError)
if (length(out1) == 4){
test1 = 1
}else{
test1 = 2
}
test2 = 0
outIrina = LRMultiClassIrina(X = x, y = y, Xt = Xtest, yt = Ytest)
if (length(out1) == 4){
# Fill in
# Everything agrees except the training error
part1 = 0.25 * check_objective(out1$objective, outIrina$objective) # 0.25
part2 = 0.25 * check_errors(out1$error_train, outIrina$error_train)
part3 = 0.25 * check_errors(out1$error_test, outIrina$error_test)
part4 = tryCatch(ifelse(sum(abs(out1$beta - outIrina$beta)) < 0.01, 0.25, 0), error = function(e) 0) # 0.25
test2 = part1 + part2 + part3 + part4
}else{
test2 = 2
}
dim(X)
dim(x)
dim(y)
LRMultiClassIrina(X = x, y = y, Xt = Xtest, yt = Ytest, eta = 0.01, lambda = 0.5, numIter = 20, beta_init = beta_init, numIter = 2)
LRMultiClassIrina(X = x, y = y, Xt = Xtest, yt = Ytest, eta = 0.01, lambda = 0.5, numIter = 2, beta_init = beta_init)
out1 = LRMultiClass(X = x, y = y, Xt = Xtest, yt = Ytest, numIter = 2)
outIrina = LRMultiClassIrina(X = x, y = y, Xt = Xtest, yt = Ytest, numIter = 2)
out1
outIrina
beta = outIrina$beta
outIrina = LRMultiClassIrina(X = x, y = y, Xt = Xtest, yt = Ytest, numIter = 2, beta_init = beta)
out1 = LRMultiClassIrina(X = x, y = y, Xt = Xtest, yt = Ytest, numIter = 2, beta_init = beta)
outIrina
outbeta
out1
test = beta
rm(beta)
out1 = LRMultiClassIrina(X = x, y = y, Xt = Xtest, yt = Ytest, numIter = 2, beta_init = test)
outIrina = LRMultiClassIrina(X = x, y = y, Xt = Xtest, yt = Ytest, numIter = 2, beta_init = test)
out1
outIrina
outIrina = LRMultiClassIrina(X = x, y = y, Xt = Xtest, yt = Ytest, numIter = 2, beta_init = matrix(0, 3, 3))
out1 = LRMultiClass(X = x, y = y, Xt = Xtest, yt = Ytest, numIter = 2, beta_init = matrix(0, 3, 3))
outIrina
out1
outIrina = LRMultiClassIrina(X = x, y = y, Xt = Xtest, yt = Ytest, numIter = 2, beta_init = test)
out1 = LRMultiClass(X = x, y = y, Xt = Xtest, yt = Ytest, numIter = 2, beta_init = test)
outIrina
out1
source("/Volumes/GoogleDrive/My Drive/MacLaptop/Teaching/TAMU/Computing/STAT600/Fall2022/Homeworks/HW3Grading/Homework 3-10-06-2022-04-12-44/androsrj/FunctionsLR.R")
rm(list=ls())
source("/Volumes/GoogleDrive/My Drive/MacLaptop/Teaching/TAMU/Computing/STAT600/Fall2022/Homeworks/HW3Grading/HW3_grading.R")
library(dplyr)
library(microbenchmark)
##################
## Modify below ##
##################
# set working dir
# setwd("~/Documents/博士教学/博五上/STAT698 STAT computing/HW3 Multi-class logistic regression-10-01-2019-02-10-07")
# These sources Irina's functions
source("IrinaFunctionsLR.R")
# Check agreement between objectives with a given tolerance
check_objective <- function(obj1, obj2, tol = 0.02){
niter = length(obj2)
if (length(obj1) != niter){
return(0)
}else{
# Check the last 5 iterations
ratio = obj1[(niter-5):niter]/obj2[(niter - 5):niter]
if ((mean(ratio, na.rm = T) > 1 - tol)&(mean(ratio, na.rm = T) < 1 + tol)){
return(1)
}else{
return(0)
}
}
}
# Check agreement between errors with a given tolerance
check_errors <- function(error1, error2, tol = 0.01){
niter = length(error2)
if (length(error1) != niter){
return(0)
}else{
# Check the last 5 iterations
ratio = error1[(niter-5):niter]/error2[(niter - 5):niter]
if ((mean(ratio, na.rm = T) > 1 - tol)&(mean(ratio, na.rm = T) < 1 + tol)){
return(1)
}else if((mean(ratio*100, na.rm = T) > 1 - tol)&(mean(ratio*100, na.rm = T) < 1 + tol)){
return(0.5)
}else{
return(0)
}
}
}
set.seed(93856)
x <- rbind(matrix(rnorm(200, sd = 0.3), ncol = 2),
matrix(rnorm(200, mean = 1, sd = 0.3), ncol = 2),
matrix(rnorm(200, mean = 1.5, sd = 0.3), ncol = 2))
y <- rep(0, 300)
y[101:200] <- 1
y[201:300] <- 2
Xtest <- rbind(matrix(rnorm(100, mean = 1, sd = 0.3), ncol = 2), matrix(rnorm(200, mean = 1.5, sd = 0.3), ncol = 2), matrix(rnorm(200, sd = 0.3), ncol = 2))
Ytest <- c(rep(1, 50), rep(2, 100), rep(0, 100))
# Does it check that the 1st column is 1s? Save for later
col1_error = tryCatch(LRMultiClass(X = x, y = y, Xt = Xtest, yt = Ytest), error = function(e) e)
# Add a columns of 1s
x = cbind(rep(1, nrow(x)), x)
Xtest = cbind(rep(1, nrow(Xtest)), Xtest)
# Does it run without errors?
out1 = tryCatch(LRMultiClass(X = x, y = y, Xt = Xtest, yt = Ytest), error = printError)
if (length(out1) == 4){
test1 = 1
}else{
test1 = 2
}
# Does it agree on the same input? (assuming it run without errors)
######################################################
test2 = 0
outIrina = LRMultiClassIrina(X = x, y = y, Xt = Xtest, yt = Ytest)
if (length(out1) == 4){
# Fill in
# Everything agrees except the training error
part1 = 0.25 * check_objective(out1$objective, outIrina$objective) # 0.25
part2 = 0.25 * check_errors(out1$error_train, outIrina$error_train)
part3 = 0.25 * check_errors(out1$error_test, outIrina$error_test)
part4 = tryCatch(ifelse(sum(abs(out1$beta - outIrina$beta)) < 0.01, 0.25, 0), error = function(e) 0) # 0.25
test2 = part1 + part2 + part3 + part4
}else{
test2 = 2
}
source("/Volumes/GoogleDrive/My Drive/MacLaptop/Teaching/TAMU/Computing/STAT600/Fall2022/Homeworks/HW3Grading/Homework 3-10-06-2022-04-12-44/androsrj/FunctionsLR.R")
set.seed(93856)
x <- rbind(matrix(rnorm(200, sd = 0.3), ncol = 2),
matrix(rnorm(200, mean = 1, sd = 0.3), ncol = 2),
matrix(rnorm(200, mean = 1.5, sd = 0.3), ncol = 2))
y <- rep(0, 300)
y[101:200] <- 1
y[201:300] <- 2
Xtest <- rbind(matrix(rnorm(100, mean = 1, sd = 0.3), ncol = 2), matrix(rnorm(200, mean = 1.5, sd = 0.3), ncol = 2), matrix(rnorm(200, sd = 0.3), ncol = 2))
Ytest <- c(rep(1, 50), rep(2, 100), rep(0, 100))
# Does it check that the 1st column is 1s? Save for later
col1_error = tryCatch(LRMultiClass(X = x, y = y, Xt = Xtest, yt = Ytest), error = function(e) e)
# Add a columns of 1s
x = cbind(rep(1, nrow(x)), x)
Xtest = cbind(rep(1, nrow(Xtest)), Xtest)
# Does it run without errors?
out1 = tryCatch(LRMultiClass(X = x, y = y, Xt = Xtest, yt = Ytest), error = printError)
if (length(out1) == 4){
test1 = 1
}else{
test1 = 2
}
# Does it agree on the same input? (assuming it run without errors)
######################################################
test2 = 0
outIrina = LRMultiClassIrina(X = x, y = y, Xt = Xtest, yt = Ytest)
if (length(out1) == 4){
# Fill in
# Everything agrees except the training error
part1 = 0.25 * check_objective(out1$objective, outIrina$objective) # 0.25
part2 = 0.25 * check_errors(out1$error_train, outIrina$error_train)
part3 = 0.25 * check_errors(out1$error_test, outIrina$error_test)
part4 = tryCatch(ifelse(sum(abs(out1$beta - outIrina$beta)) < 0.01, 0.25, 0), error = function(e) 0) # 0.25
test2 = part1 + part2 + part3 + part4
}else{
test2 = 2
}
out1 = tryCatch(LRMultiClass(X = x, y = y, Xt = Xtest, yt = Ytest, eta = 0.01, lambda = 0.5, numIter = 20), error = printError)
if (length(out1) == 4){
outIrina = LRMultiClassIrina(X = x, y = y, Xt = Xtest, yt = Ytest, eta = 0.01, lambda = 0.5, numIter = 20)
part1 = 0.5 * check_objective(out1$objective, outIrina$objective) #0.5
part2 = tryCatch(ifelse(sum(abs(out1$beta - outIrina$beta)) < 0.01, 0.5, 0), error = function(e) 0) # 0.5
test3 = part1 + part2
}else{
test3 = 2
}
p = nrow(outIrina$beta)
K = ncol(outIrina$beta)
set.seed(2359862)
beta_init = matrix(rnorm(p*K), p, K)
out1 = tryCatch(LRMultiClass(X = x, y = y, Xt = Xtest, yt = Ytest, eta = 0.01, lambda = 0.5, numIter = 20, beta_init = beta_init), error = function(e) 2)
if (length(out1) == 4){
outIrina = LRMultiClassIrina(X = x, y = y, Xt = Xtest, yt = Ytest, eta = 0.01, lambda = 0.5, numIter = 20, beta_init = beta_init)
part1 = 0.5 * check_objective(out1$objective, outIrina$objective) #0.5
part2 = tryCatch(ifelse(sum(abs(out1$beta - outIrina$beta)) < 0.01, 0.5, 0), error = function(e) 0)  #0.5
test4 = part1 + part2
}else{
test4 = 2
}
test4
source("/Volumes/GoogleDrive/My Drive/MacLaptop/Teaching/TAMU/Computing/STAT600/Fall2022/Homeworks/HW3Grading/Homework 3-10-06-2022-04-12-44/androsrj/FunctionsLR.R")
p = nrow(outIrina$beta)
K = ncol(outIrina$beta)
set.seed(2359862)
beta_init = matrix(rnorm(p*K), p, K)
out1 = tryCatch(LRMultiClass(X = x, y = y, Xt = Xtest, yt = Ytest, eta = 0.01, lambda = 0.5, numIter = 20, beta_init = beta_init), error = function(e) 2)
if (length(out1) == 4){
outIrina = LRMultiClassIrina(X = x, y = y, Xt = Xtest, yt = Ytest, eta = 0.01, lambda = 0.5, numIter = 20, beta_init = beta_init)
part1 = 0.5 * check_objective(out1$objective, outIrina$objective) #0.5
part2 = tryCatch(ifelse(sum(abs(out1$beta - outIrina$beta)) < 0.01, 0.5, 0), error = function(e) 0)  #0.5
test4 = part1 + part2
}else{
test4 = 2
}
LRMultiClassIrina
LRMultiClass
test2 = 0
outIrina = LRMultiClassIrina(X = x, y = y, Xt = Xtest, yt = Ytest)
if (length(out1) == 4){
# Fill in
# Everything agrees except the training error
part1 = 0.25 * check_objective(out1$objective, outIrina$objective) # 0.25
part2 = 0.25 * check_errors(out1$error_train, outIrina$error_train)
part3 = 0.25 * check_errors(out1$error_test, outIrina$error_test)
part4 = tryCatch(ifelse(sum(abs(out1$beta - outIrina$beta)) < 0.01, 0.25, 0), error = function(e) 0) # 0.25
test2 = part1 + part2 + part3 + part4
}else{
test2 = 2
}
rm(list=ls())
set.seed(93856)
x <- rbind(matrix(rnorm(200, sd = 0.3), ncol = 2),
matrix(rnorm(200, mean = 1, sd = 0.3), ncol = 2),
matrix(rnorm(200, mean = 1.5, sd = 0.3), ncol = 2))
y <- rep(0, 300)
y[101:200] <- 1
y[201:300] <- 2
Xtest <- rbind(matrix(rnorm(100, mean = 1, sd = 0.3), ncol = 2), matrix(rnorm(200, mean = 1.5, sd = 0.3), ncol = 2), matrix(rnorm(200, sd = 0.3), ncol = 2))
Ytest <- c(rep(1, 50), rep(2, 100), rep(0, 100))
# Does it check that the 1st column is 1s? Save for later
col1_error = tryCatch(LRMultiClass(X = x, y = y, Xt = Xtest, yt = Ytest), error = function(e) e)
# Add a columns of 1s
x = cbind(rep(1, nrow(x)), x)
Xtest = cbind(rep(1, nrow(Xtest)), Xtest)
# Does it run without errors?
out1 = tryCatch(LRMultiClass(X = x, y = y, Xt = Xtest, yt = Ytest), error = printError)
printError <- function(e) {
message("ERROR :", conditionMessage(e), "\n")
cat("ERROR :", conditionMessage(e), "\n")
2
}
# Check agreement between objectives with a given tolerance
check_objective <- function(obj1, obj2, tol = 0.02){
niter = length(obj2)
if (length(obj1) != niter){
return(0)
}else{
# Check the last 5 iterations
ratio = obj1[(niter-5):niter]/obj2[(niter - 5):niter]
if ((mean(ratio, na.rm = T) > 1 - tol)&(mean(ratio, na.rm = T) < 1 + tol)){
return(1)
}else{
return(0)
}
}
}
# Check agreement between errors with a given tolerance
check_errors <- function(error1, error2, tol = 0.01){
niter = length(error2)
if (length(error1) != niter){
return(0)
}else{
# Check the last 5 iterations
ratio = error1[(niter-5):niter]/error2[(niter - 5):niter]
if ((mean(ratio, na.rm = T) > 1 - tol)&(mean(ratio, na.rm = T) < 1 + tol)){
return(1)
}else if((mean(ratio*100, na.rm = T) > 1 - tol)&(mean(ratio*100, na.rm = T) < 1 + tol)){
return(0.5)
}else{
return(0)
}
}
}
set.seed(93856)
x <- rbind(matrix(rnorm(200, sd = 0.3), ncol = 2),
matrix(rnorm(200, mean = 1, sd = 0.3), ncol = 2),
matrix(rnorm(200, mean = 1.5, sd = 0.3), ncol = 2))
y <- rep(0, 300)
y[101:200] <- 1
y[201:300] <- 2
Xtest <- rbind(matrix(rnorm(100, mean = 1, sd = 0.3), ncol = 2), matrix(rnorm(200, mean = 1.5, sd = 0.3), ncol = 2), matrix(rnorm(200, sd = 0.3), ncol = 2))
Ytest <- c(rep(1, 50), rep(2, 100), rep(0, 100))
# Does it check that the 1st column is 1s? Save for later
col1_error = tryCatch(LRMultiClass(X = x, y = y, Xt = Xtest, yt = Ytest), error = function(e) e)
# Add a columns of 1s
x = cbind(rep(1, nrow(x)), x)
Xtest = cbind(rep(1, nrow(Xtest)), Xtest)
# Does it run without errors?
out1 = tryCatch(LRMultiClass(X = x, y = y, Xt = Xtest, yt = Ytest), error = printError)
if (length(out1) == 4){
test1 = 1
}else{
test1 = 2
}
# Does it agree on the same input? (assuming it run without errors)
######################################################
test2 = 0
outIrina = LRMultiClassIrina(X = x, y = y, Xt = Xtest, yt = Ytest)
source("/Volumes/GoogleDrive/My Drive/MacLaptop/Teaching/TAMU/Computing/STAT600/Fall2022/Homeworks/HW3Grading/Homework 3-10-06-2022-04-12-44/androsrj/FunctionsLR.R")
source("/Volumes/GoogleDrive/My Drive/MacLaptop/Teaching/TAMU/Computing/STAT600/Fall2022/Homeworks/HW3Grading/IrinaFunctionsLR.R")
set.seed(93856)
x <- rbind(matrix(rnorm(200, sd = 0.3), ncol = 2),
matrix(rnorm(200, mean = 1, sd = 0.3), ncol = 2),
matrix(rnorm(200, mean = 1.5, sd = 0.3), ncol = 2))
y <- rep(0, 300)
y[101:200] <- 1
y[201:300] <- 2
Xtest <- rbind(matrix(rnorm(100, mean = 1, sd = 0.3), ncol = 2), matrix(rnorm(200, mean = 1.5, sd = 0.3), ncol = 2), matrix(rnorm(200, sd = 0.3), ncol = 2))
Ytest <- c(rep(1, 50), rep(2, 100), rep(0, 100))
# Does it check that the 1st column is 1s? Save for later
col1_error = tryCatch(LRMultiClass(X = x, y = y, Xt = Xtest, yt = Ytest), error = function(e) e)
# Add a columns of 1s
x = cbind(rep(1, nrow(x)), x)
Xtest = cbind(rep(1, nrow(Xtest)), Xtest)
# Does it run without errors?
out1 = tryCatch(LRMultiClass(X = x, y = y, Xt = Xtest, yt = Ytest), error = printError)
if (length(out1) == 4){
test1 = 1
}else{
test1 = 2
}
# Does it agree on the same input? (assuming it run without errors)
######################################################
test2 = 0
outIrina = LRMultiClassIrina(X = x, y = y, Xt = Xtest, yt = Ytest)
if (length(out1) == 4){
# Fill in
# Everything agrees except the training error
part1 = 0.25 * check_objective(out1$objective, outIrina$objective) # 0.25
part2 = 0.25 * check_errors(out1$error_train, outIrina$error_train)
part3 = 0.25 * check_errors(out1$error_test, outIrina$error_test)
part4 = tryCatch(ifelse(sum(abs(out1$beta - outIrina$beta)) < 0.01, 0.25, 0), error = function(e) 0) # 0.25
test2 = part1 + part2 + part3 + part4
}else{
test2 = 2
}
# Does it agree with me on the same input with different parameters?
######################################################
out1 = tryCatch(LRMultiClass(X = x, y = y, Xt = Xtest, yt = Ytest, eta = 0.01, lambda = 0.5, numIter = 20), error = printError)
if (length(out1) == 4){
outIrina = LRMultiClassIrina(X = x, y = y, Xt = Xtest, yt = Ytest, eta = 0.01, lambda = 0.5, numIter = 20)
part1 = 0.5 * check_objective(out1$objective, outIrina$objective) #0.5
part2 = tryCatch(ifelse(sum(abs(out1$beta - outIrina$beta)) < 0.01, 0.5, 0), error = function(e) 0) # 0.5
test3 = part1 + part2
}else{
test3 = 2
}
# Does it accept given beta properly
######################################################
p = nrow(outIrina$beta)
K = ncol(outIrina$beta)
set.seed(2359862)
beta_init = matrix(rnorm(p*K), p, K)
out1 = tryCatch(LRMultiClass(X = x, y = y, Xt = Xtest, yt = Ytest, eta = 0.01, lambda = 0.5, numIter = 20, beta_init = beta_init), error = function(e) 2)
if (length(out1) == 4){
outIrina = LRMultiClassIrina(X = x, y = y, Xt = Xtest, yt = Ytest, eta = 0.01, lambda = 0.5, numIter = 20, beta_init = beta_init)
part1 = 0.5 * check_objective(out1$objective, outIrina$objective) #0.5
part2 = tryCatch(ifelse(sum(abs(out1$beta - outIrina$beta)) < 0.01, 0.5, 0), error = function(e) 0)  #0.5
test4 = part1 + part2
}else{
test4 = 2
}
test2
source("/Volumes/GoogleDrive/My Drive/MacLaptop/Teaching/TAMU/Computing/STAT600/Fall2022/Homeworks/HW3Grading/Homework 3-10-06-2022-04-12-44/androsrj/FunctionsLR.R")
set.seed(93856)
x <- rbind(matrix(rnorm(200, sd = 0.3), ncol = 2),
matrix(rnorm(200, mean = 1, sd = 0.3), ncol = 2),
matrix(rnorm(200, mean = 1.5, sd = 0.3), ncol = 2))
y <- rep(0, 300)
y[101:200] <- 1
y[201:300] <- 2
Xtest <- rbind(matrix(rnorm(100, mean = 1, sd = 0.3), ncol = 2), matrix(rnorm(200, mean = 1.5, sd = 0.3), ncol = 2), matrix(rnorm(200, sd = 0.3), ncol = 2))
Ytest <- c(rep(1, 50), rep(2, 100), rep(0, 100))
# Does it check that the 1st column is 1s? Save for later
col1_error = tryCatch(LRMultiClass(X = x, y = y, Xt = Xtest, yt = Ytest), error = function(e) e)
# Add a columns of 1s
x = cbind(rep(1, nrow(x)), x)
Xtest = cbind(rep(1, nrow(Xtest)), Xtest)
# Does it run without errors?
out1 = tryCatch(LRMultiClass(X = x, y = y, Xt = Xtest, yt = Ytest), error = printError)
if (length(out1) == 4){
test1 = 1
}else{
test1 = 2
}
# Does it agree on the same input? (assuming it run without errors)
######################################################
test2 = 0
outIrina = LRMultiClassIrina(X = x, y = y, Xt = Xtest, yt = Ytest)
if (length(out1) == 4){
# Fill in
# Everything agrees except the training error
part1 = 0.25 * check_objective(out1$objective, outIrina$objective) # 0.25
part2 = 0.25 * check_errors(out1$error_train, outIrina$error_train)
part3 = 0.25 * check_errors(out1$error_test, outIrina$error_test)
part4 = tryCatch(ifelse(sum(abs(out1$beta - outIrina$beta)) < 0.01, 0.25, 0), error = function(e) 0) # 0.25
test2 = part1 + part2 + part3 + part4
}else{
test2 = 2
}
# Does it agree with me on the same input with different parameters?
######################################################
out1 = tryCatch(LRMultiClass(X = x, y = y, Xt = Xtest, yt = Ytest, eta = 0.01, lambda = 0.5, numIter = 20), error = printError)
if (length(out1) == 4){
outIrina = LRMultiClassIrina(X = x, y = y, Xt = Xtest, yt = Ytest, eta = 0.01, lambda = 0.5, numIter = 20)
part1 = 0.5 * check_objective(out1$objective, outIrina$objective) #0.5
part2 = tryCatch(ifelse(sum(abs(out1$beta - outIrina$beta)) < 0.01, 0.5, 0), error = function(e) 0) # 0.5
test3 = part1 + part2
}else{
test3 = 2
}
# Does it accept given beta properly
######################################################
p = nrow(outIrina$beta)
K = ncol(outIrina$beta)
set.seed(2359862)
beta_init = matrix(rnorm(p*K), p, K)
out1 = tryCatch(LRMultiClass(X = x, y = y, Xt = Xtest, yt = Ytest, eta = 0.01, lambda = 0.5, numIter = 20, beta_init = beta_init), error = function(e) 2)
if (length(out1) == 4){
outIrina = LRMultiClassIrina(X = x, y = y, Xt = Xtest, yt = Ytest, eta = 0.01, lambda = 0.5, numIter = 20, beta_init = beta_init)
part1 = 0.5 * check_objective(out1$objective, outIrina$objective) #0.5
part2 = tryCatch(ifelse(sum(abs(out1$beta - outIrina$beta)) < 0.01, 0.5, 0), error = function(e) 0)  #0.5
test4 = part1 + part2
}else{
test4 = 2
}
library(TestRpackage)
# Some informal tests for function soft
soft(3, 1) # this should return 2
soft(-2, 1.5) # this should return -0.5
soft(1, 3.2) # this should return 0
soft(1, 3.2) == 0 # this should be true
library(TestRpackage)
library(TestRpackage)
library(TestRpackage)
library(usethis)
use_build_ignore("Draft.R")
library(TestRpackage)
install.packages("testthat")
library(usethis)
use_testthat()
use_test()
use_test()
?test_that
library(TestRpackage)
library(glment)
library(glmnet)
vignette(package = "glmnet")
vignette("Coxnet")
usethis::use_vignette("my-vignette", "This is the title")
library(usethis)
use_rcpp_armadillo()
library(TestRpackage)
library(TestRpackage)
?soft
?hard
library(TestRpackage)
?soft
library(TestRpackage)
soft(3, 1)
?soft
?hard
library(TestRpackage)
?soft
?hard
library(iglu)
?sd_roc
?example_data_1_subject
citation("glmnet")
print(citation("glmnet"), bibtex = TRUE)
citation("iglu")
citation("TestRpackage")
usethis::use_citation()
usethis::use_readme_rmd()
devtools::spell_check()
devtools::spell_check()
spelling::update_wordlist()
devtools::spell_check()
?prop.tes
?prop.test
citation("mgcv")
